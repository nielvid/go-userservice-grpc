// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *UserParams, opts ...grpc.CallOption) (*AuthUser, error)
	FindUsers(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*Users, error)
	FetchUsers(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (UserService_FetchUsersClient, error)
	VerifyUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_VerifyUsersClient, error)
	FindUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *UserParams, opts ...grpc.CallOption) (*AuthUser, error) {
	out := new(AuthUser)
	err := c.cc.Invoke(ctx, "/user_service.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUsers(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/user_service.UserService/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FetchUsers(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (UserService_FetchUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/user_service.UserService/FetchUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceFetchUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_FetchUsersClient interface {
	Recv() (*Users, error)
	grpc.ClientStream
}

type userServiceFetchUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceFetchUsersClient) Recv() (*Users, error) {
	m := new(Users)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) VerifyUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_VerifyUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/user_service.UserService/VerifyUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceVerifyUsersClient{stream}
	return x, nil
}

type UserService_VerifyUsersClient interface {
	Send(*Params) error
	CloseAndRecv() (*Users, error)
	grpc.ClientStream
}

type userServiceVerifyUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceVerifyUsersClient) Send(m *Params) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceVerifyUsersClient) CloseAndRecv() (*Users, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Users)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) FindUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user_service.UserService/FindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user_service.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *UserParams) (*AuthUser, error)
	FindUsers(context.Context, *NoParams) (*Users, error)
	FetchUsers(*NoParams, UserService_FetchUsersServer) error
	VerifyUsers(UserService_VerifyUsersServer) error
	FindUser(context.Context, *UserId) (*User, error)
	DeleteUser(context.Context, *UserId) (*User, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *UserParams) (*AuthUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) FindUsers(context.Context, *NoParams) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}
func (UnimplementedUserServiceServer) FetchUsers(*NoParams, UserService_FetchUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchUsers not implemented")
}
func (UnimplementedUserServiceServer) VerifyUsers(UserService_VerifyUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method VerifyUsers not implemented")
}
func (UnimplementedUserServiceServer) FindUser(context.Context, *UserId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *UserId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*UserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUsers(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FetchUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).FetchUsers(m, &userServiceFetchUsersServer{stream})
}

type UserService_FetchUsersServer interface {
	Send(*Users) error
	grpc.ServerStream
}

type userServiceFetchUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceFetchUsersServer) Send(m *Users) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_VerifyUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).VerifyUsers(&userServiceVerifyUsersServer{stream})
}

type UserService_VerifyUsersServer interface {
	SendAndClose(*Users) error
	Recv() (*Params, error)
	grpc.ServerStream
}

type userServiceVerifyUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceVerifyUsersServer) SendAndClose(m *Users) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceVerifyUsersServer) Recv() (*Params, error) {
	m := new(Params)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _UserService_FindUsers_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _UserService_FindUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchUsers",
			Handler:       _UserService_FetchUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VerifyUsers",
			Handler:       _UserService_VerifyUsers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/user.proto",
}
